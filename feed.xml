<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-08-19T17:28:03+00:00</updated><id>/feed.xml</id><title type="html">Darren Sim</title><subtitle>Tech Lead, Developer, Speaker &amp; Author in New Zealand</subtitle><entry><title type="html">Tips for Running a Code Kata (Developer Dojo) at the Workplace</title><link href="/tips-for-running-a-code-kata-developer-dojo-at-the-workplace/" rel="alternate" type="text/html" title="Tips for Running a Code Kata (Developer Dojo) at the Workplace" /><published>2018-07-14T00:00:00+00:00</published><updated>2018-07-14T00:00:00+00:00</updated><id>/tips-for-running-a-code-kata-developer-dojo-at-the-workplace</id><content type="html" xml:base="/tips-for-running-a-code-kata-developer-dojo-at-the-workplace/">&lt;h2 id=&quot;what-is-a-code-kata&quot;&gt;What is a Code Kata?&lt;/h2&gt;

&lt;p&gt;A concept borrowed from the Japanese martial arts world, katas are exercises which help practitioners hone their skills through practice and repetition. Over the past decade, katas has been adopted as part of the wider Software Craftsmanship movement, seeing katas introduced as part of leading Software Development and Software Architecture courses around the world.
Organisations and software teams that embrace this practice has increasingly prioritised time for software practitioners to work on katas together, at a regular cadence. This provides a safe space for teams to &lt;strong&gt;experiment new practices&lt;/strong&gt;, &lt;strong&gt;hone new skills&lt;/strong&gt;, &lt;strong&gt;challenge assumptions&lt;/strong&gt; and &lt;strong&gt;work with team members they do not usually interact with&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-happens-during-a-code-kata-session&quot;&gt;What happens during a Code Kata Session&lt;/h2&gt;

&lt;p&gt;Code Katas usually last between 2 - 4 hours, and are conducted in spaces with minimal interruptions. While it is ideal to have these sessions in a meeting or conference room, team-spaces can work too.&lt;/p&gt;

&lt;p&gt;These sessions (code katas) are usually facilitated by someone with practical experience - for the practice/skill the group is trying to hone, and has done the kata more than once. During the course of the Kata, collaboration techniques such as pair-programming and mob-programming can also be introduced.&lt;/p&gt;

&lt;p&gt;It is always useful to work on Katas that focus on just one (never more than three) practice, on a tool and language that team members are already familiar with. This minimizes context switching and reduces frustrations on toolchain setup. If familiarization of the tool and/or language is in question, it always pays to organize a hand-on lab session prior, to onboard (installation plus training) team members onto the tools.&lt;/p&gt;

&lt;p&gt;It is highly valuable to conclude each Kata with a &lt;strong&gt;retrospective&lt;/strong&gt;. This gives team members the opportunity to &lt;strong&gt;recap what they have learnt&lt;/strong&gt;, &lt;strong&gt;give feedback on how the Kata can be improved&lt;/strong&gt;, and most importantly, &lt;strong&gt;how they are plan to exercise these new skills in their work&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-happens-after-the-session&quot;&gt;What happens after the session?&lt;/h2&gt;

&lt;p&gt;If the practice is something new to the team en-mass, it always helps to repeat the same Kata a couple more times to help team members get familiar with the practice.&lt;/p&gt;

&lt;p&gt;To accelerate a team’s learning of the practice, it will also be useful to invite someone - who has substantial experience with the practice, to “mob” on a real world user story with the team. This person can be from the same organization, an external organization that the company has a trusted relationship with, a local community leader, or an external consultant.&lt;/p&gt;

&lt;p&gt;This helps the team:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;localize the practice to make it practical for the team,&lt;/li&gt;
  &lt;li&gt;see that this new practice can actually work in real world production work, and&lt;/li&gt;
  &lt;li&gt;opens up the opportunity for feedback on how the team might be able to improve their ways of working.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frequently-asked-questions-faq&quot;&gt;Frequently Asked Questions (FAQ)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Duration - How long should a Kata be?&lt;/strong&gt;
Usually 120 minutes (2 hours) to 240 minutes (4 hours). 90 minutes might work in some situations where the team is already familiar with Katas and has some basic understanding (not necessarily practical) of the practice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ideal Size - How many participants can a Code Kata session accommodate?&lt;/strong&gt;
4 to 10 participants per facilitator is the recommended ratio. It is generally discouraged for sessions to go beyond 40 participants as coordination becomes very difficult.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Setup - What resources are required to run a Code Kata session?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ideally a Conference / Meeting Room. Team area can work too.&lt;/li&gt;
  &lt;li&gt;Table and chairs&lt;/li&gt;
  &lt;li&gt;1 computer (laptop /pc) for every 2 persons&lt;/li&gt;
  &lt;li&gt;Whiteboard&lt;/li&gt;
  &lt;li&gt;Projection (Computer Projector / TV Screen)&lt;/li&gt;
  &lt;li&gt;Sticky Notes&lt;/li&gt;
  &lt;li&gt;Sharpies&lt;/li&gt;
  &lt;li&gt;Printouts of the Katas (1 per participant)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Format - How does a Code Kata agenda or session plan look like?&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Timeline&lt;/th&gt;
      &lt;th&gt;Activity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10 Minutes&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Introduction&lt;/strong&gt; Covering health &amp;amp; safely briefs, evacuation procedures, kata pre-requisites, and other general matters.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20 Minutes&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Presentation on Concepts and Techniques&lt;/strong&gt; Introduction to concepts and practices that will be exercised within the Kata (e.g. TDD).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80 Minutes&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Interactive Kata Session&lt;/strong&gt; Participants are formed into groups (e.g. pairs) to work on the katas. Various collaboration techniques can be introduced, in addition to the kata. It is recommended to perform a pulse check once every 20 minutes - this is a good time to swap pairs.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10 Minutes&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Retrospect on Activity&lt;/strong&gt; Talk through with participants on what they have learnt from the session, what it might be improved and how might they apply how they learnt into their ways of working.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>sal</name></author><summary type="html">What is a Code Kata?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/posts/coding-dojo.jpg" /></entry><entry><title type="html">Introduction to Feature Toggles and Implementation Best Practices</title><link href="/introduction-to-feature-toggles-and-implementation-best-practices/" rel="alternate" type="text/html" title="Introduction to Feature Toggles and Implementation Best Practices" /><published>2018-06-24T00:00:00+00:00</published><updated>2018-06-24T00:00:00+00:00</updated><id>/introduction-to-feature-toggles-and-implementation-best-practices</id><content type="html" xml:base="/introduction-to-feature-toggles-and-implementation-best-practices/">&lt;p&gt;As software professionals, success is measured by our ability to improve our users’ lives.&lt;/p&gt;

&lt;p&gt;Unlike other engineering fields which have been around for hundreds of years, the software engineering discipline has existed for barely a hundred years. As an industry, software development is still largely part-art, part-science.&lt;/p&gt;

&lt;p&gt;With the ever evolving business and technological landscape, many of our past experiences serve merely as references. Adding to the unknowns, users seldom know what features they want, but they know what they don’t want. More often than not, it takes several attempts of trial-and-error before software teams become successful in delivering features that stick.&lt;/p&gt;

&lt;p&gt;The ability to continuously deliver working software into the hands of customers, has served as a competitive advantage for leading tech companies like Amazon and Facebook. Not only did this capability allow engineering teams to deploy code into production in small chunks, quickly, and safely, it also shortened the feedback loop - allowing teams to learn fast and respond to changes quickly.&lt;/p&gt;

&lt;p&gt;In the practice of Continuous Delivery (CD), it’s important that the application is continuously integrated (CI), and deployable at all times. This can be challenging especially in situations where a feature spans multiple commits, and, an urgent fix needs to be released before the development of that feature is complete. This highlights the need for deployment and release to be decoupled.&lt;/p&gt;

&lt;p&gt;When a feature is completed and deployed to production, teams also need a way to experiment safely, beta testing with a small group of users and being able to roll back quickly if an undesirable experience is observed.&lt;/p&gt;

&lt;p&gt;Feature Toggles offers options to overcome to these challenges.&lt;/p&gt;

&lt;p&gt;In this article, we will explore: &lt;strong&gt;1) what feature toggles are&lt;/strong&gt;, &lt;strong&gt;2) how we can use them&lt;/strong&gt;, before &lt;strong&gt;3) discussing best practices&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-are-feature-toggles&quot;&gt;What are Feature Toggles?&lt;/h3&gt;

&lt;p&gt;Feature Toggling is not a new concept and was a common practice more than 20 years ago, in the absence of reliable and easy-to-use concurrent versioning systems (CVS). In recent years, Feature Toggle experienced a resurgence with the popularisation of DevOps practices and mindsets within software development teams.&lt;/p&gt;

&lt;p&gt;Also known as “Feature Flags”, “Config Flags”, “Flippers”, “Feature Bits” and “Conditional Feature”, Feature Toggling is a set of patterns that help teams deliver new functionally to users rapidly but safely, separating deployment from release, allowing teams to modify system behavior without changing code. Implemented by simply wrapping an if-statement around a code block that we are trying to isolate, the condition of this if-statement can be a simple boolean or complex decision trees with multiple paths.&lt;/p&gt;

&lt;p&gt;The basic idea here is that we have a configuration system that allows the development team to toggle features on or off. When the application is executed, it will use these toggles to decide what features to display. The actual implementation will vary - ranging from a hard-coded configuration value within the application where changing the toggle configurations require a redeployment of the application, to reading toggle states from a text file, or a web service, allowing teams to modify toggle configurations at runtime.&lt;/p&gt;

&lt;p&gt;Some of the benefits that Feature Toggles bring to the table include helping teams eliminate nasty merge conflicts, reduce deployment risks and achieving a shorter feedback loop. However, there’s always two side of a coin. Apart from introducing technical debt the moment we use Feature Toggles in our code, Feature Toggles also results in code being more fragile, harder to test, harder to maintain, and harder to support. Hence, Feature Toggles should always be short-lived, and used on a need-be basis rather than it being the silver-bullet to software development.&lt;/p&gt;

&lt;p&gt;One of the most common misunderstandings of Feature Toggles is that it can double as a licensing and authorization service. This results in tight coupling of responsibility and should be avoided.&lt;/p&gt;

&lt;h3 id=&quot;types-of-feature-toggles&quot;&gt;Types of Feature Toggles&lt;/h3&gt;

&lt;p&gt;In his thought-leading article “&lt;a href=&quot;https://martinfowler.com/articles/feature-toggles.html&quot;&gt;Feature Toggles (aka Feature Flags)&lt;/a&gt;”, &lt;a href=&quot;http://blog.thepete.net/&quot;&gt;Pete Hodgson&lt;/a&gt; extended &lt;a href=&quot;https://martinfowler.com/aboutMe.html&quot;&gt;Martin Fowler’s&lt;/a&gt; original post “&lt;a href=&quot;https://martinfowler.com/bliki/FeatureToggle.html&quot;&gt;FeatureToggle&lt;/a&gt;”, nicely categorizing Feature Toggles into FOUR categories:&lt;/p&gt;</content><author><name>sal</name></author><summary type="html">As software professionals, success is measured by our ability to improve our users’ lives.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/posts/feature-toggle.jpg" /></entry></feed>